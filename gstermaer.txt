gst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw,width=640,height=480,framerate=30/1 ! videoconvert ! x265enc tune=zerolatency ! rtph265pay ! udpsink host=127.0.0.1 port=5600
gst-launch-1.0 udpsrc port=5600 ! application/x-rtp,encoding-name=H265 ! rtph265depay ! decodebin ! autovideosink


gst-launch-1.0 udpsrc port=5601 ! tsparse ! tsdemux ! h264parse ! avdec_h264 ! videoconvert ! video/x-raw,format=BGR ! autovideosink sync=false


C:\Users\ASUS>gst-launch-1.0 ksvideosrc ! videoconvert ! video/x-raw,format=I420,width=640,height=480,framerate=30/1 ! x264enc tune=zerolatency bitrate=500 ! rtph264pay config-interval=1 pt=96 ! udpsink host=127.0.0.1 port=5601




#include <opencv2/opencv.hpp>
#include <iostream>

int main(int argc, char *argv[]) {
    std::string videoFile = "input.mp4"; // Change this to your video file path
    
    cv::VideoCapture cap(videoFile);
    if (!cap.isOpened()) {
        std::cerr << "Error: Could not open video file." << std::endl;
        return -1;
    }

    int width = static_cast<int>(cap.get(cv::CAP_PROP_FRAME_WIDTH));
    int height = static_cast<int>(cap.get(cv::CAP_PROP_FRAME_HEIGHT));
    int fps = static_cast<int>(cap.get(cv::CAP_PROP_FPS));

    std::string pipeline = "appsrc ! videoconvert ! video/x-raw, format=NV12 ! "
                           "mpph265enc ! rtph265pay config-interval=1 ! "
                           "udpsink host=192.168.144.100 port=5600";

    cv::VideoWriter writer(pipeline, 0, fps, cv::Size(width, height), true);
    
    if (!writer.isOpened()) {
        std::cerr << "Error: Could not open GStreamer pipeline." << std::endl;
        return -1;
    }
    
    cv::Mat frame;
    while (cap.read(frame)) {
        writer.write(frame);
        cv::imshow("Streaming", frame);
        if (cv::waitKey(1) == 27) break; // Press 'ESC' to exit
    }

    cap.release();
    writer.release();
    cv::destroyAllWindows();
    return 0;
}
